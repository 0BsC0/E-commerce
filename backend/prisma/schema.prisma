// Cliente Prisma para interactuar con la base de datos
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

// Configuración de la base de datos PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum que define los roles posibles para los usuarios
enum UserRole {
  customer   // Cliente que compra
  viverista  // Vendedor de productos (viverista)
  admin      // Administrador del sistema
}

// Representa a un usuario del sistema
model User {
  id          Int       @id @default(autoincrement())
  name        String
  lastName    String?
  email       String    @unique
  password    String
  phone       String?
  address     String?
  storeName   String?
  role        UserRole  @default(customer)
  createdAt   DateTime  @default(now())

  products    Product[]
  orders      Order[]
  cartItems   CartItem[]
  resetTokens PasswordResetToken[] 
}

// Productos creados por viveristas
model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  stock       Int       @default(0)
  isAvailable Boolean   @default(true)
  createdAt   DateTime  @default(now())

  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  orderItems  OrderItem[]
  cartItems   CartItem[]
}

// Ítems en el carrito del cliente
model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// Órdenes del sistema
model Order {
  id            Int         @id @default(autoincrement())
  total         Float
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  paymentId     String?     @unique
  paymentStatus String?     // Opcional: "approved", "pending", etc.

  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

// Productos comprados dentro de una orden
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  orderId   Int

  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

// Estado de una orden
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

// Tokens para recuperación de contraseña
model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}
